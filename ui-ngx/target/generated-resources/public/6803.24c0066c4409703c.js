"use strict";(self.webpackChunkthingsboard=self.webpackChunkthingsboard||[]).push([[6803],{46803:(M,r,o)=>{o.r(r),o.d(r,{TbCanvasDigitalGauge:()=>g});var f=o(93387),c=o(9351),u=o(98409),S=o(71954),p=o(35103),d=o(50147),v=o(71337),b=o(27164),C=o(70970);class g{constructor(e,l){this.ctx=e;const s=C("#"+l,e.$container)[0],t=e.settings;this.localSettings={},this.localSettings.minValue=t.minValue||0,this.localSettings.maxValue=t.maxValue||100,this.localSettings.gaugeType=t.gaugeType||"arc",this.localSettings.neonGlowBrightness=t.neonGlowBrightness||0,this.localSettings.dashThickness=t.dashThickness||0,this.localSettings.roundedLineCap=!0===t.roundedLineCap;const i=e.data[0].dataKey,a=t.defaultColor||i.color;this.localSettings.unitTitle=!0===t.showUnitTitle?t.unitTitle&&t.unitTitle.length>0?t.unitTitle:i.label:"",this.localSettings.showUnitTitle=!0===t.showUnitTitle,this.localSettings.showTimestamp=!0===t.showTimestamp,this.localSettings.timestampFormat=t.timestampFormat&&t.timestampFormat.length?t.timestampFormat:"yyyy-MM-dd HH:mm:ss",this.localSettings.gaugeWidthScale=t.gaugeWidthScale||.75,this.localSettings.gaugeColor=t.gaugeColor||(0,f.Z)(a).setAlpha(.2).toRgbString(),this.localSettings.useFixedLevelColor=t.useFixedLevelColor||!1,t.useFixedLevelColor?(this.localSettings.levelColors=[a],this.localSettings.fixedLevelColors=t.fixedLevelColors||[]):t.levelColors&&0!==t.levelColors.length?this.localSettings.levelColors=t.levelColors.slice():this.localSettings.levelColors=[a],this.localSettings.showTicks=t.showTicks||!1,this.localSettings.ticks=[],this.localSettings.ticksValue=t.ticksValue||[],this.localSettings.tickWidth=t.tickWidth||4,this.localSettings.colorTicks=t.colorTicks||"#666",this.localSettings.decimals=(0,c.$K)(i.decimals)?i.decimals:(0,c.nu)(t.decimals)?t.decimals:e.decimals,this.localSettings.units=i.units&&i.units.length?i.units:(0,c.$K)(t.units)&&t.units.length>0?t.units:e.units,this.localSettings.hideValue=!0!==t.showValue,this.localSettings.hideMinMax=!0!==t.showMinMax,this.localSettings.donutStartAngle=(0,c.nu)(t.donutStartAngle)?-g.toRadians(t.donutStartAngle):null,this.localSettings.title=!0===t.showTitle?t.title&&t.title.length>0?t.title:i.label:"",!this.localSettings.unitTitle&&this.localSettings.showTimestamp&&(this.localSettings.unitTitle=" "),this.localSettings.titleFont=(0,u.F)(t.titleFont,{size:12,style:"normal",weight:"500",color:a}),this.localSettings.valueFont=(0,u.F)(t.valueFont,{size:18,style:"normal",weight:"500",color:a}),this.localSettings.minMaxFont=(0,u.F)(t.minMaxFont,{size:10,style:"normal",weight:"500",color:a}),this.localSettings.labelFont=(0,u.F)(t.labelFont,{size:8,style:"normal",weight:"500",color:a});const n={renderTo:s,gaugeWidthScale:this.localSettings.gaugeWidthScale,gaugeColor:this.localSettings.gaugeColor,levelColors:this.localSettings.levelColors,colorTicks:this.localSettings.colorTicks,tickWidth:this.localSettings.tickWidth,ticks:this.localSettings.ticks,title:this.localSettings.title,fontTitleSize:this.localSettings.titleFont.size,fontTitleStyle:this.localSettings.titleFont.style,fontTitleWeight:this.localSettings.titleFont.weight,colorTitle:this.localSettings.titleFont.color,fontTitle:this.localSettings.titleFont.family,fontValueSize:this.localSettings.valueFont.size,fontValueStyle:this.localSettings.valueFont.style,fontValueWeight:this.localSettings.valueFont.weight,colorValue:this.localSettings.valueFont.color,fontValue:this.localSettings.valueFont.family,fontMinMaxSize:this.localSettings.minMaxFont.size,fontMinMaxStyle:this.localSettings.minMaxFont.style,fontMinMaxWeight:this.localSettings.minMaxFont.weight,colorMinMax:this.localSettings.minMaxFont.color,fontMinMax:this.localSettings.minMaxFont.family,fontLabelSize:this.localSettings.labelFont.size,fontLabelStyle:this.localSettings.labelFont.style,fontLabelWeight:this.localSettings.labelFont.weight,colorLabel:this.localSettings.labelFont.color,fontLabel:this.localSettings.labelFont.family,minValue:this.localSettings.minValue,maxValue:this.localSettings.maxValue,gaugeType:this.localSettings.gaugeType,dashThickness:this.localSettings.dashThickness,roundedLineCap:this.localSettings.roundedLineCap,symbol:this.localSettings.units,unitTitle:this.localSettings.unitTitle,showUnitTitle:this.localSettings.showUnitTitle,showTimestamp:this.localSettings.showTimestamp,hideValue:this.localSettings.hideValue,hideMinMax:this.localSettings.hideMinMax,donutStartAngle:this.localSettings.donutStartAngle,valueDec:this.localSettings.decimals,neonGlowBrightness:this.localSettings.neonGlowBrightness,animation:!1!==t.animation&&!e.isMobile,animationDuration:(0,c.nu)(t.animationDuration)?t.animationDuration:500,animationRule:t.animationRule||"linear",isMobile:e.isMobile};this.gauge=new S.CanvasDigitalGauge(n).draw(),this.init()}static generateDatasource(e,l,s,t,i){const a=e.aliasController.getEntityAliasId(s);if(!a)throw new Error("Not valid entity aliase name "+s);const n=l.find(h=>h.entityAliasId===a),m={type:v.dG.attribute,name:t,label:t,settings:[i],_hash:Math.random()};if(n){const h=n.dataKeys.find(T=>T.name===t);h?h.settings.push(i):n.dataKeys.push(m)}else{const h={type:d.i9.entity,name:s,aliasName:s,entityAliasId:a,dataKeys:[m]};l.push(h)}return l}static toRadians(e){return e*(Math.PI/180)}init(){let e=!1;this.localSettings.useFixedLevelColor&&this.localSettings.fixedLevelColors?.length>0&&(this.localSettings.levelColors=this.settingLevelColorsSubscribe(this.localSettings.fixedLevelColors),e=!0),this.localSettings.showTicks&&this.localSettings.ticksValue?.length&&(this.localSettings.ticks=this.settingTicksSubscribe(this.localSettings.ticksValue),e=!0),e&&this.updateSetting()}settingLevelColorsSubscribe(e){let l=[];const s=[];function t(i,a){if("predefinedValue"===i.valueSource&&isFinite(i.value))s.push({value:i.value,color:a});else if(i.entityAlias&&i.attribute){try{l=g.generateDatasource(this.ctx,l,i.entityAlias,i.attribute,{color:a,index:s.length})}catch{return}s.push(null)}}s.push({value:this.localSettings.minValue,color:this.localSettings.gaugeColor});for(const i of e)i.from&&t.call(this,i.from,i.color),i.to&&t.call(this,i.to,i.color);return this.subscribeAttributes(l,"levelColors").subscribe(i=>{this.levelColorsSourcesSubscription=i}),s}settingTicksSubscribe(e){let l=[];const s=[];for(const t of e)if("predefinedValue"===t.valueSource&&isFinite(t.value))s.push(t.value);else if(t.entityAlias&&t.attribute){try{l=g.generateDatasource(this.ctx,l,t.entityAlias,t.attribute,s.length)}catch{continue}s.push(null)}return this.subscribeAttributes(l,"ticks").subscribe(t=>{this.ticksSourcesSubscription=t}),s}subscribeAttributes(e,l){if(!e.length)return b.E;const s={datasources:e,useDashboardTimewindow:!1,type:d.oS.latest,callbacks:{onDataUpdated:t=>{this.updateAttribute(t.data,l)}}};return this.ctx.subscriptionApi.createSubscription(s,!0)}updateAttribute(e,l){for(const s of e)if(s&&s.data&&s.data[0]){const t=s.data[0][1];if(isFinite(t))for(const i of s.dataKey.settings)switch(l){case"levelColors":this.localSettings.levelColors[i.index]={value:t,color:i.color};break;case"ticks":this.localSettings.ticks[i]=t}}this.updateSetting()}updateSetting(){this.gauge.options.ticks=this.localSettings.ticks,this.gauge.options.levelColors=this.localSettings.levelColors,this.gauge.options=S.CanvasDigitalGauge.configure(this.gauge.options),this.gauge.update({})}update(){if(this.ctx.data.length>0){const e=this.ctx.data[0];if(e.data.length>0){const l=e.data[e.data.length-1];let s;if(this.localSettings.showTimestamp){s=l[0];const i=this.ctx.$injector.get(p.DatePipe);this.gauge.options.labelTimestamp=i.transform(s,this.localSettings.timestampFormat)}const t=parseFloat(l[1]);t!==this.gauge.value?(this.gauge.options.animation||(this.gauge._value=t),this.gauge.value=t):this.localSettings.showTimestamp&&this.gauge.timestamp!==s&&(this.gauge.timestamp=s)}}}mobileModeChanged(){const e=!1!==this.ctx.settings.animation&&!this.ctx.isMobile;this.gauge.update({animation:e,isMobile:this.ctx.isMobile})}resize(){this.gauge.update({width:this.ctx.width,height:this.ctx.height})}destroy(){this.gauge.destroy(),this.gauge=null}}}}]);